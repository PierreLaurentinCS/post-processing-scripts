#############################################################################
"""
Postprocessing code for dam-break_Martin_and_Moyce example

"""
#############################################################################

'''Parameters'''

#############################################################################
'''Importing Libraries'''
from math import pi
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.tri as tri
from natsort import os_sorted
from matplotlib import cm
import pyvista as pv
import glob

import os
import sys
import scienceplots
plt.style.use(['science', 'ieee'])


#For controlling font sized globally
SMALL_SIZE = 7
MEDIUM_SIZE = 10
BIGGER_SIZE = 10
plt.rc('font', size=SMALL_SIZE)          # controls default text sizes
plt.rc('axes', labelsize=SMALL_SIZE)             # fontsize of the x and y labels
plt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize
plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title


#############################################################################

#############################################################################
'''Functions'''

#############################################################################

#Constants
L1 = 3.5
g  = 1.0
time_correction = 0.175

#Set phase_limit to search for maximum x
phase_limit = 0.0

#Take case path as argument and store it
output_path = sys.argv[1]

# Read the pvd file to extract the times
reader = pv.get_reader(f"{output_path}/dam-break.pvd")
# Get active times
time_list = reader.time_values

#Define list of VTU files
list_vtu = os.listdir(output_path)
list_vtu = [x for x in list_vtu if  ("vtu" in x and "pvtu" not in x) ]

# Sort VTU files to ensure they are in the same order as the time step
list_vtu = os_sorted(list_vtu)

#Create a list to fill with maximum x in which phase > phase_limit
x_list = []

#Read vtu data
for i in range(0, len(list_vtu)):
    #Read DF from VTK files
    exec(f'df_{i} = pv.read(f\'{output_path}/{list_vtu[i]}\')')

    #Select a data to apply the slice   
    exec(f'df = df_{i}')

    #find max 'x' in which phase > 0
    points = pd.DataFrame(df.points[:, 0])
    phase  = pd.DataFrame(df['phase_order'])

    x_max = max(points[phase[0] < phase_limit].values)[0]
    x_list.append(x_max)


#Experimental data from Martin & Moyce 1952
x_exp = [0, 0.41, 0.84, 1.19, 1.43, 1.63, 1.82, 1.97, 2.2, 2.32, 2.5, 2.64, 2.82, 2.96]
y_exp = [1, 1.11, 1.23, 1.44, 1.67, 1.89, 2.11, 2.33, 2.56, 2.78, 3, 3.22, 3.44, 3.67]

#Make the time_list and x_list dimensionless
time_list = [x * ((2 * g / L1) ** 0.5) for x in time_list]
x_list = [x / L1 for x in x_list]

time_list_vof_old = [0.175, 0.4743983026187232, 0.6869169577041683, 0.8471054865041274, 0.9851025987803714, 1.1098205524519984, 1.2253427082501624, 1.3340644726491966, 1.4375977879817625, 1.5369654205481862, 1.632874789565146, 1.7258093680690731, 1.8161675786915998, 1.9042470925013204, 1.9903015199555725, 2.0745447905335297, 2.157141502449008, 2.2382654559900668, 2.31804764259893, 2.396599362759044, 2.4740328717752655, 2.550432856700026, 2.6258798279422626, 2.7004673988430947, 2.7742335730953034, 2.8472660952117717, 2.91962836412924, 2.9913863668054654, 3.062594681401062, 3.1333401817045976, 3.2037048701775634, 3.2739156435269505]

x_list_vof_old = [0.9910714285714286, 1.0446428571428572, 1.1428571428571428, 1.2410714285714286, 1.3303571428571428, 1.4285714285714286, 1.5267857142857142, 1.6160714285714286, 1.7142857142857142, 1.8035714285714286, 1.9017857142857142, 2.0, 2.0892857142857144, 2.1875, 2.2857142857142856, 2.375, 2.4732142857142856, 2.5625, 2.6607142857142856, 2.75, 2.8482142857142856, 2.9464285714285716, 3.0357142857142856, 3.1339285714285716, 3.2232142857142856, 3.3214285714285716, 3.4107142857142856, 3.5089285714285716, 3.5982142857142856, 3.6964285714285716, 3.7857142857142856, 3.875]

time_list_vof = [0.175, 0.4464366842683453, 0.641348129205511, 0.7941768378800613, 0.9268321963100932, 1.046840774132262, 1.157953898457507, 1.2623746723014533, 1.3615108779089489, 1.4563121978784646, 1.5474744365255086, 1.6355335825781485, 1.7209016490005056, 1.8039002864618776, 1.884795281771879, 1.9638085285217723, 2.041125905489333, 2.1169031201585864, 2.1912737687819543, 2.264354438696542, 2.336250428808879, 2.4070557054184256, 2.4768515997973632, 2.5457093139665363, 2.613692153656645, 2.680856462349172, 2.7472579844216716, 2.8129441408314633, 2.877961598549658, 2.9423512955357483, 3.0061539857712396, 3.0694093732674514, 3.132156106864722, 3.194241172015424]
x_list_vof = [0.9910714285714286, 1.0446428571428572, 1.1339285714285714, 1.2232142857142858, 1.3214285714285714, 1.4107142857142858, 1.5, 1.5982142857142858, 1.6875, 1.7767857142857142, 1.875, 1.9642857142857142, 2.0535714285714284, 2.1517857142857144, 2.2410714285714284, 2.330357142857143, 2.419642857142857, 2.517857142857143, 2.607142857142857, 2.6964285714285716, 2.7857142857142856, 2.875, 2.9732142857142856, 3.0625, 3.1517857142857144, 3.2410714285714284, 3.330357142857143, 3.4285714285714284, 3.517857142857143, 3.607142857142857, 3.6964285714285716, 3.7857142857142856, 3.875, 3.9642857142857144]


time_list_one_more_ref=[0.175, 0.3728309794934547, 0.49435404896389096, 0.5920347249341544, 0.6776934934314884, 0.7555527768632, 0.8277511786249809, 0.8955736507626955, 0.9598736766209635, 1.0212583585450747, 1.0801776627321622, 1.136978117389985, 1.1919317422798077, 1.2452571676703108, 1.297132684362306, 1.3476876205351165, 1.3970466017794472, 1.4453246626107215, 1.492621245474229, 1.5390216520001931, 1.584601114799921, 1.629425903571274, 1.6735543750461765, 1.7170196220098934, 1.759856880782486, 1.802104012329791, 1.8437954765723674, 1.8849621977696724, 1.9256324761250116, 1.9658322171041451, 2.0055848851422002, 2.0449123228363093, 2.083834539088964, 2.1223699184700955, 2.1605357098571054, 2.1983477772504485, 2.23582082160098, 2.272968783047308, 2.3098045586972824, 2.3463401676094833, 2.382587092435314, 2.418556054371388, 2.4542570307877964, 2.489699629012294, 2.5248929242062155, 2.559845376696087, 2.594565129628209, 2.629059972306101, 2.66333730734539, 2.6974040657149563, 2.7312670256028793, 2.764932701680409, 2.7984073186973664, 2.831696886681955, 2.864807239508257, 2.897744137513586, 2.9305132783687466, 2.9631203286909806, 2.9955711502708264, 3.0278719819032642, 3.0600302397501684, 3.092056524180471, 3.1162675619949907, 3.124153954745791, 3.1300391586630614, 3.1359338222902804, 3.142070526874759, 3.148469980704449, 3.155131338847331]
x_list_one_more_ref = [0.9955357142857143, 1.0267857142857142, 1.0758928571428572, 1.1205357142857142, 1.1696428571428572, 1.21875, 1.2678571428571428, 1.3169642857142858, 1.3660714285714286, 1.4151785714285714, 1.4642857142857142, 1.5133928571428572, 1.5625, 1.6071428571428572, 1.65625, 1.7053571428571428, 1.7544642857142858, 1.8035714285714286, 1.8526785714285714, 1.9017857142857142, 1.9508928571428572, 2.0, 2.049107142857143, 2.0982142857142856, 2.1473214285714284, 2.1964285714285716, 2.2455357142857144, 2.294642857142857, 2.3392857142857144, 2.388392857142857, 2.4375, 2.486607142857143, 2.5357142857142856, 2.5848214285714284, 2.6339285714285716, 2.6785714285714284, 2.7276785714285716, 2.7767857142857144, 2.825892857142857, 2.875, 2.924107142857143, 2.96875, 3.017857142857143, 3.0669642857142856, 3.1160714285714284, 3.1607142857142856, 3.2098214285714284, 3.2589285714285716, 3.3080357142857144, 3.3526785714285716, 3.4017857142857144, 3.450892857142857, 3.4955357142857144, 3.544642857142857, 3.59375, 3.638392857142857, 3.6875, 3.736607142857143, 3.78125, 3.830357142857143, 3.8794642857142856, 3.924107142857143, 3.9598214285714284, 3.9732142857142856, 3.982142857142857, 3.986607142857143, 3.9910714285714284, 3.9955357142857144, 3.9955357142857144]
#Time-correction
time_list = [x + time_correction for x in time_list]
print(time_list)
print(x_list)
with plt.style.context(['science', 'ieee']):
    fig0 = plt.figure()
    ax0 = fig0.add_subplot(111)
    
    ax0.plot(time_list_one_more_ref, x_list_one_more_ref, '-*b', label="Lethe - CHNS " + r'$(\Delta x_{\text{interface}} = 1.56\times 10^{-2})$', markersize=3,lw=1)
    ax0.plot(time_list, x_list, '-*g', label="Lethe - CHNS " + r'$(\Delta x_{\text{interface}} = 3.12\times 10^{-2})$', markersize=2,lw=1)
    ax0.plot(time_list_vof, x_list_vof, '-ok', label="Lethe - VOF", markersize=2,lw=1)
    ax0.plot(x_exp, y_exp, 'ro',label="ExpÃ©rience - Martin and Moyce (1952)", markersize=2,lw=1)
    ax0.set_ylabel(r'Position adimensionnelle du front du fluide $\delta$ [m]')
    ax0.set_xlabel(r'Temps adimensionnel $\tau$')
    #ax0.set_xlim([0, 3.5])
    ax0.set_ylim([1, 3.75])
    #plt.title('Water front x position as a function of time')
    ax0.legend(loc="upper left",frameon=False, edgecolor='k',
               prop={'size': 6.5}, ncol=1)
    fig0.savefig(f'./dam-break-x.png',dpi=1000)
    fig0.savefig('./dam-break-x.pdf', format="pdf", dpi=1000)
